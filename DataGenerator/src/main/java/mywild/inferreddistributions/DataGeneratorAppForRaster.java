package mywild.inferreddistributions;

import java.awt.Cursor;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class DataGeneratorAppForRaster extends JFrame {
    private String dataFolder = Paths.get(System.getProperty("user.home"), 
            "InferredDistributions", "RawData", "RasterMaps").toAbsolutePath().toString();

    public DataGeneratorAppForRaster() {
        initComponents();
    }
    
    public static void main(String args[]) {
        // Set native Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Launch the application
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                DataGeneratorAppForRaster app = new DataGeneratorAppForRaster();
                app.setLocationRelativeTo(null);
                app.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spnLonTL = new javax.swing.JSpinner();
        spnLonBR = new javax.swing.JSpinner();
        spnLatTL = new javax.swing.JSpinner();
        spnLatBR = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtDataFolderPath = new javax.swing.JTextField();
        btnDataFolderBrowse = new javax.swing.JButton();
        btnGenerateInputDatasets = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        spnGridSize = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        chkReplaceFiles = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        btnGenerateLimits = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dataset Generator for Raster Data");
        setMinimumSize(new java.awt.Dimension(880, 585));
        setPreferredSize(new java.awt.Dimension(880, 590));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+15));
        jLabel1.setText("Dataset Generator for Raster Data");

        jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getStyle() | java.awt.Font.BOLD, jLabel6.getFont().getSize()+2));
        jLabel6.setText("Bottom-Right Longitude:");

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | java.awt.Font.BOLD, jLabel2.getFont().getSize()+2));
        jLabel2.setText("Top-Left Latitude:");

        spnLonTL.setFont(spnLonTL.getFont().deriveFont(spnLonTL.getFont().getSize()+1f));
        spnLonTL.setModel(new javax.swing.SpinnerNumberModel(10.0d, -180.0d, 180.0d, 1.0d));
        spnLonTL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        spnLonBR.setFont(spnLonBR.getFont().deriveFont(spnLonBR.getFont().getSize()+1f));
        spnLonBR.setModel(new javax.swing.SpinnerNumberModel(40.0d, -180.0d, 180.0d, 1.0d));
        spnLonBR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        spnLatTL.setFont(spnLatTL.getFont().deriveFont(spnLatTL.getFont().getSize()+1f));
        spnLatTL.setModel(new javax.swing.SpinnerNumberModel(-16.0d, -90.0d, 90.0d, 1.0d));
        spnLatTL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        spnLatBR.setFont(spnLatBR.getFont().deriveFont(spnLatBR.getFont().getSize()+1f));
        spnLatBR.setModel(new javax.swing.SpinnerNumberModel(-35.0d, -90.0d, 90.0d, 1.0d));
        spnLatBR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() | java.awt.Font.BOLD, jLabel3.getFont().getSize()+2));
        jLabel3.setText("Top-Left Longitude:");

        jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getStyle() | java.awt.Font.BOLD, jLabel4.getFont().getSize()+6));
        jLabel4.setText("Bounding Box");

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getStyle() | java.awt.Font.BOLD, jLabel5.getFont().getSize()+2));
        jLabel5.setText("Bottom-Right Latitude:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(734, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnLatTL)
                            .addComponent(spnLonTL))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnLatBR)
                            .addComponent(spnLonBR))
                        .addGap(5, 5, 5))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel4)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spnLatTL)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnLonTL)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spnLatBR)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnLonBR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5))
        );

        jLabel7.setFont(jLabel7.getFont().deriveFont(jLabel7.getFont().getStyle() | java.awt.Font.BOLD, jLabel7.getFont().getSize()+6));
        jLabel7.setText("Data Folder");

        txtDataFolderPath.setFont(txtDataFolderPath.getFont().deriveFont(txtDataFolderPath.getFont().getSize()+2f));
        txtDataFolderPath.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDataFolderPath.setText(dataFolder);
        txtDataFolderPath.setEnabled(false);

        btnDataFolderBrowse.setFont(btnDataFolderBrowse.getFont().deriveFont(btnDataFolderBrowse.getFont().getSize()+2f));
        btnDataFolderBrowse.setText("Browse");
        btnDataFolderBrowse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDataFolderBrowse.setFocusPainted(false);
        btnDataFolderBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataFolderBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtDataFolderPath)
                        .addGap(5, 5, 5)
                        .addComponent(btnDataFolderBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel7)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDataFolderBrowse))
                .addGap(5, 5, 5))
        );

        btnGenerateInputDatasets.setFont(btnGenerateInputDatasets.getFont().deriveFont(btnGenerateInputDatasets.getFont().getStyle() | java.awt.Font.BOLD, btnGenerateInputDatasets.getFont().getSize()+13));
        btnGenerateInputDatasets.setText("Generate Raster Datasets");
        btnGenerateInputDatasets.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerateInputDatasets.setFocusPainted(false);
        btnGenerateInputDatasets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateInputDatasetsActionPerformed(evt);
            }
        });

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getStyle() | java.awt.Font.BOLD, jLabel8.getFont().getSize()+6));
        jLabel8.setText("Grid Size");

        spnGridSize.setFont(spnGridSize.getFont().deriveFont(spnGridSize.getFont().getSize()+1f));
        spnGridSize.setModel(new javax.swing.SpinnerNumberModel(0.25d, 0.01d, 1.0d, 0.1d));
        spnGridSize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel10.setFont(jLabel10.getFont().deriveFont(jLabel10.getFont().getStyle() | java.awt.Font.BOLD, jLabel10.getFont().getSize()+2));
        jLabel10.setText("Degree Fraction:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(10, 10, 10)
                        .addComponent(spnGridSize, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                        .addGap(492, 492, 492))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(5, 5, 5))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel8)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnGridSize)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        jLabel9.setFont(jLabel9.getFont().deriveFont(jLabel9.getFont().getStyle() | java.awt.Font.BOLD, jLabel9.getFont().getSize()+6));
        jLabel9.setText("Options");

        chkReplaceFiles.setFont(chkReplaceFiles.getFont().deriveFont(chkReplaceFiles.getFont().getSize()+1f));
        chkReplaceFiles.setSelected(true);
        chkReplaceFiles.setText("Replace exisitng files");
        chkReplaceFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkReplaceFiles.setFocusPainted(false);

        jLabel13.setFont(jLabel13.getFont().deriveFont(jLabel13.getFont().getStyle() | java.awt.Font.BOLD, jLabel13.getFont().getSize()+1));
        jLabel13.setText("Settings:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(20, 20, 20)
                        .addComponent(chkReplaceFiles)))
                .addGap(0, 643, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel9)
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkReplaceFiles)
                    .addComponent(jLabel13))
                .addGap(5, 5, 5))
        );

        btnGenerateLimits.setFont(btnGenerateLimits.getFont().deriveFont(btnGenerateLimits.getFont().getStyle() | java.awt.Font.BOLD, btnGenerateLimits.getFont().getSize()+13));
        btnGenerateLimits.setText("Calculate Limits");
        btnGenerateLimits.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerateLimits.setFocusPainted(false);
        btnGenerateLimits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateLimitsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGenerateInputDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGenerateLimits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnGenerateLimits, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnGenerateInputDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDataFolderBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataFolderBrowseActionPerformed
        JFileChooser fileChooser = new JFileChooser(dataFolder);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        int result = fileChooser.showOpenDialog(this);
        if ((result != JFileChooser.ERROR_OPTION) && (result == JFileChooser.APPROVE_OPTION)) {
            dataFolder = fileChooser.getSelectedFile().toPath().toAbsolutePath().toString();
            txtDataFolderPath.setText(dataFolder);
        }
    }//GEN-LAST:event_btnDataFolderBrowseActionPerformed

    private void btnGenerateInputDatasetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateInputDatasetsActionPerformed
        getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        getGlassPane().setVisible(true);
        try {
            Files.walkFileTree(Paths.get(dataFolder), new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    if (file.getFileName().toString().toLowerCase().endsWith(".csv")) {
                        processDataCSV(file);
                    }
                    return FileVisitResult.CONTINUE;
                }
            });
            JOptionPane.showMessageDialog(this, "The datasets have been generated.", "FINISHED Datasets", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
        catch (IOException ex) {
            Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "The datasets have NOT been generated.", "ERROR Datasets", 
                    JOptionPane.ERROR_MESSAGE);
        }
        getGlassPane().setVisible(false);
        getGlassPane().setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnGenerateInputDatasetsActionPerformed

    private void btnGenerateLimitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateLimitsActionPerformed
        getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        getGlassPane().setVisible(true);
        try {
            Files.walkFileTree(Paths.get(dataFolder), new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    if (file.getFileName().toString().toLowerCase().endsWith(".csv")) {
                        processLimitsCSV(file);
                    }
                    return FileVisitResult.CONTINUE;
                }
            });
            JOptionPane.showMessageDialog(this, "The limits files have been generated.", "FINISHED Limits Files", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
        catch (IOException ex) {
            Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "The limits files have NOT been generated.", "ERROR Limits Files", 
                    JOptionPane.ERROR_MESSAGE);
        }
        getGlassPane().setVisible(false);
        getGlassPane().setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnGenerateLimitsActionPerformed

    private void processLimitsCSV(Path file) throws IOException {
        Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.INFO, "Processing File: {0}", file.toString());
        double minValue = Double.MAX_VALUE;
        double maxValue = Double.MIN_VALUE;
        Map<Double, MapCounter> mapValueCount = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(file.toFile()))) {
            final String SEPARATOR_CHAR = ",";
            final int valIndex = 2;
            String line = null;
            while ((line = reader.readLine()) != null) {
                String[] dataRow = line.split(SEPARATOR_CHAR);
                double value = Double.parseDouble(dataRow[valIndex]);
                value = Math.round(value * 1000.0) / 1000.0;
                if (value > maxValue) {
                    maxValue = value;
                }
                if (value < minValue) {
                    minValue = value;
                }
                MapCounter counter = mapValueCount.get(value);
                if (counter == null) {
                    counter = new MapCounter();
                    mapValueCount.put(value, counter);
                }
                counter.count++;
            }
            // Closing just to be paranoid (should be handled by the try-with-resources statement already)
            reader.close();
        }
        // Write the input dataset file
        String filename = file.getFileName().toString();
        Path limitFile = file.getParent().resolve(filename.substring(0, filename.length() - 4) + ".lmt");
        writeLimits(minValue, maxValue, mapValueCount, limitFile);
    }
    
    private void writeLimits(double min, double max, Map<Double, MapCounter> mapValueCount, Path file) throws IOException {
        Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.INFO, "Writing File: {0}", file.toString());
        if (!chkReplaceFiles.isSelected() && Files.exists(file)) {
            Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.INFO, "... The file will be skipped (not overwritten).");
            return;
        }
        // Write the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file.toFile()))) {
            // Write Min / Max
            writer.write(Double.toString(min));
            writer.write(System.lineSeparator());
            writer.write(Double.toString(max));
            writer.write(System.lineSeparator());
            // Write value counts
            writer.write(System.lineSeparator());
            writer.write("Value = Count");
            List<Double> lstKeys = new ArrayList<>(mapValueCount.keySet());
            Collections.sort(lstKeys);
            for (Double key : lstKeys) {
                writer.write(System.lineSeparator());
                writer.write(key + " = " + mapValueCount.get(key).count);
            }
            // Flushing and closing just to be paranoid (should be handled by the try-with-resources statement already)
            writer.flush();
            writer.close();
        }
    }

    private void processDataCSV(Path file) throws IOException {
        Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.INFO, "Processing File: {0}", file.toString());
        // Get the limits to use
        String filename = file.getFileName().toString();
        Path limitFile = file.getParent().resolve(filename.substring(0, filename.length() - 4) + ".lmt");
        if (!Files.exists(limitFile)) {
            JOptionPane.showMessageDialog(this, "The limits file has not yet been generated: " + file.toString(), "ERROR Missing Limits", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        double minLimit = Double.MIN_VALUE;
        double maxLimit = Double.MAX_VALUE;
        try (BufferedReader reader = new BufferedReader(new FileReader(limitFile.toFile()))) {
            int row = 0;
            String line = null;
            while ((line = reader.readLine()) != null) {
                row++;
                if (row == 1) {
                    minLimit = Double.parseDouble(line);
                }
                else
                if (row == 2) {
                    maxLimit = Double.parseDouble(line);
                }
                else
                if (row > 2) {
                    break;
                }
            }
        }
        // Read the map data
        final double GRID_SIZE = (double) spnGridSize.getValue();
        Map<String, MapCounter> mapGridCounts = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(file.toFile()))) {
            final String SEPARATOR_CHAR = ",";
            final int lonIndex = 0;
            final int latIndex = 1;
            final int valIndex = 2;
            String line = null;
            while ((line = reader.readLine()) != null) {
                String[] dataRow = line.split(SEPARATOR_CHAR);
                // Process the data row
                String key = buildGridKey(convertToGrid(dataRow[latIndex], GRID_SIZE), convertToGrid(dataRow[lonIndex], GRID_SIZE));
                MapCounter counter = mapGridCounts.get(key);
                if (counter == null) {
                    counter = new MapCounter();
                    mapGridCounts.put(key, counter);
                }
// TODO: Handle the case when the map grid is smaller and I need to combine values (for now assume the grid on the map and input field match)
                counter.count = Double.parseDouble(dataRow[valIndex]);
                if (counter.count < minLimit) {
                    counter.count = minLimit;
                }
                else
                if (counter.count > maxLimit) {
                    counter.count = maxLimit;
                }
            }
            // Closing just to be paranoid (should be handled by the try-with-resources statement already)
            reader.close();
        }
        // Write the input dataset file
        String csvFilename = file.getFileName().toString();
        Path inputDataset = file.getParent().resolve(csvFilename.substring(0, csvFilename.length() - 4) + ".idi");
        writeDataset(mapGridCounts, inputDataset);
    }

    private String buildGridKey(double lat, double lon) {
        return lat + "_" + lon;
    }
    
    private void writeDataset(Map<String, MapCounter> mapGridCounts, Path file) throws IOException {
        Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.INFO, "Writing File: {0}", file.toString());
        if (!chkReplaceFiles.isSelected() && Files.exists(file)) {
            Logger.getLogger(DataGeneratorAppForRaster.class.getName()).log(Level.INFO, "... The file will be skipped (not overwritten).");
            return;
        }
        final double GRID_SIZE = (double) spnGridSize.getValue();
        // Adjust all the GPS values to make sure they are positive numbers, then it is simpler to do the comparisons
        // Latitude will be processed top to bottom
        final double LAT_END = Math.min(
                convertToGrid((double) spnLatTL.getValue(), GRID_SIZE) + 1000, 
                convertToGrid((double) spnLatBR.getValue(), GRID_SIZE) + 1000);
        double lat = Math.max(
                convertToGrid((double) spnLatTL.getValue(), GRID_SIZE) + 1000, 
                convertToGrid((double) spnLatBR.getValue(), GRID_SIZE) + 1000);
        // Longitude will be processed left to right
        final double LON_START = Math.min(
                convertToGrid((double) spnLonTL.getValue(), GRID_SIZE) + 1000, 
                convertToGrid((double) spnLonBR.getValue(), GRID_SIZE) + 1000);
        final double LON_END = Math.max(
                convertToGrid((double) spnLonTL.getValue(), GRID_SIZE) + 1000, 
                convertToGrid((double) spnLonBR.getValue(), GRID_SIZE) + 1000);
        double lon = Math.min(
                convertToGrid((double) spnLonTL.getValue(), GRID_SIZE) + 1000, 
                convertToGrid((double) spnLonBR.getValue(), GRID_SIZE) + 1000);
        // Get the max count
        double minCount = Double.MAX_VALUE;
        double maxCount = Double.MIN_VALUE;
        for (MapCounter counter : mapGridCounts.values()) {
            if (counter.count < minCount) {
                minCount = counter.count;
            }
            if (counter.count > maxCount) {
                maxCount = counter.count;
            }
        }
        double range = maxCount - minCount;
        // Write the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file.toFile()))) {
            while (lat > LAT_END) {
                while (lon < LON_END) {
                    String key = buildGridKey(lat - 1000, lon - 1000);
                    MapCounter counter = mapGridCounts.get(key);
                    if (counter == null) {
                        writer.write("0.0");
                    }
                    else {
                        double weight = (counter.count - minCount) / range;
// TODO: Maybe also apply some sort of Log algorith here? To make big numbers look bigger and small numbers look smaller...
                        writer.write(Double.toString(Math.round(weight * 1000.0) / 1000.0));
                    }
                    // Move to the next column
                    writer.write(",");
                    lon = lon + GRID_SIZE; // left to right
                }
                // Move the the next row
                writer.write(System.lineSeparator());
                lon = LON_START;
                lat = lat - GRID_SIZE; // top to bottom
            }
            // Flushing and closing just to be paranoid (should be handled by the try-with-resources statement already)
            writer.flush();
            writer.close();
        }
    }
    
    private double convertToGrid(String value, double gridSize) {
        return convertToGrid(Double.parseDouble(value), gridSize);
    }
    
    private double convertToGrid(double value, double gridSize) {
        double temp = ((int) (Math.abs(value) / gridSize)) * gridSize;
        if (value < 0) {
            temp = -1 * temp;
        }
        return Math.round(temp * 1000.0) / 1000.0;
    }
    
    private final class MapCounter {
        public double count = 0;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDataFolderBrowse;
    private javax.swing.JButton btnGenerateInputDatasets;
    private javax.swing.JButton btnGenerateLimits;
    private javax.swing.JCheckBox chkReplaceFiles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner spnGridSize;
    private javax.swing.JSpinner spnLatBR;
    private javax.swing.JSpinner spnLatTL;
    private javax.swing.JSpinner spnLonBR;
    private javax.swing.JSpinner spnLonTL;
    private javax.swing.JTextField txtDataFolderPath;
    // End of variables declaration//GEN-END:variables
}
