package mywild.inferreddistributions;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;

public class DataViewerApp extends JFrame {
    private String dataFile = Paths.get(System.getProperty("user.home"), "InferredDistributions").toAbsolutePath().toString();

    public DataViewerApp() {
        initComponents();
    }
    
    public static void main(String args[]) {
        // Set native Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(DataViewerApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Launch the application
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                DataViewerApp app = new DataViewerApp();
                app.setLocationRelativeTo(null);
                app.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtDataFolderPath = new javax.swing.JTextField();
        btnDataFolderBrowse = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btnPreviewData = new javax.swing.JButton();
        btnSavePreview = new javax.swing.JButton();
        pnlView = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Viewer");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+15));
        jLabel1.setText("Data Viewer");

        jLabel7.setFont(jLabel7.getFont().deriveFont(jLabel7.getFont().getStyle() | java.awt.Font.BOLD, jLabel7.getFont().getSize()+6));
        jLabel7.setText("Dataset");

        txtDataFolderPath.setFont(txtDataFolderPath.getFont().deriveFont(txtDataFolderPath.getFont().getSize()+2f));
        txtDataFolderPath.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDataFolderPath.setText(dataFile);
        txtDataFolderPath.setEnabled(false);

        btnDataFolderBrowse.setFont(btnDataFolderBrowse.getFont().deriveFont(btnDataFolderBrowse.getFont().getSize()+2f));
        btnDataFolderBrowse.setText("Browse");
        btnDataFolderBrowse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDataFolderBrowse.setFocusPainted(false);
        btnDataFolderBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataFolderBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtDataFolderPath, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addComponent(btnDataFolderBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel7)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDataFolderBrowse))
                .addGap(5, 5, 5))
        );

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getStyle() | java.awt.Font.BOLD, jLabel8.getFont().getSize()+6));
        jLabel8.setText("Dataset Visualization");

        btnPreviewData.setFont(btnPreviewData.getFont().deriveFont(btnPreviewData.getFont().getStyle() | java.awt.Font.BOLD, btnPreviewData.getFont().getSize()+15));
        btnPreviewData.setText("Generate Preview");
        btnPreviewData.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPreviewData.setFocusPainted(false);
        btnPreviewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewDataActionPerformed(evt);
            }
        });

        btnSavePreview.setFont(btnSavePreview.getFont().deriveFont(btnSavePreview.getFont().getStyle() | java.awt.Font.BOLD, btnSavePreview.getFont().getSize()+15));
        btnSavePreview.setText("Create Preview Image");
        btnSavePreview.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSavePreview.setFocusPainted(false);
        btnSavePreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePreviewActionPerformed(evt);
            }
        });

        pnlView.setBackground(new java.awt.Color(0, 0, 0));
        pnlView.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlView.setMinimumSize(new java.awt.Dimension(500, 600));
        pnlView.setPreferredSize(new java.awt.Dimension(80, 80));
        pnlView.setLayout(new java.awt.GridLayout(1, 1, 1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPreviewData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSavePreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel8)
                .addGap(5, 5, 5)
                .addComponent(pnlView, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(btnPreviewData, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnSavePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDataFolderBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataFolderBrowseActionPerformed
        JFileChooser fileChooser = new JFileChooser(dataFile);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getName().toLowerCase().endsWith(".idi");
            }

            @Override
            public String getDescription() {
                return "IDI";
            }
        });
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        int result = fileChooser.showOpenDialog(this);
        if ((result != JFileChooser.ERROR_OPTION) && (result == JFileChooser.APPROVE_OPTION)) {
            dataFile = fileChooser.getSelectedFile().toPath().toAbsolutePath().toString();
            txtDataFolderPath.setText(dataFile);
            btnPreviewDataActionPerformed(evt);
        }
    }//GEN-LAST:event_btnDataFolderBrowseActionPerformed

    private void btnPreviewDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewDataActionPerformed
        Path idiPath = Paths.get(dataFile).toAbsolutePath();
        if (Files.exists(idiPath) && dataFile.toLowerCase().endsWith(".idi")) {
            List<List<Double>> lstAllRowValues = new ArrayList<>();
            // Read the file
            try (BufferedReader reader = new BufferedReader(new FileReader(idiPath.toFile()))) {
                final String SEPARATOR_CHAR = ",";
                String line = null;
                while ((line = reader.readLine()) != null) {
                    if (!line.trim().isEmpty()) {
                        String[] dataRow = line.split(SEPARATOR_CHAR);
                        List<Double> lstSingleRow = new ArrayList<>(dataRow.length);
                        for (String data : dataRow) {
                            lstSingleRow.add(Double.parseDouble(data));
                        }
                        lstAllRowValues.add(lstSingleRow);
                    }
                }
                // Closing just to be paranoid (should be handled by the try-with-resources statement already)
                reader.close();
            }
            catch (IOException ex) {
                Logger.getLogger(DataViewerApp.class.getName()).log(Level.SEVERE, null, ex);
            }
            // Draw the grid
// TODO: Find a better way of drawing the data (for now just a quick hack to show something on screen)
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    pnlView.removeAll();
                    GridLayout gridLayout = (GridLayout) pnlView.getLayout();
                    gridLayout.setColumns(lstAllRowValues.get(0).size());
                    gridLayout.setRows(lstAllRowValues.size());
                    for (int r = 0; r < lstAllRowValues.size(); r++) {
                        List<Double> lstSingleRow = lstAllRowValues.get(r);
                        for (int c = 0; c < lstSingleRow.size(); c++) {
                            double value = lstSingleRow.get(c);
                            JLabel lblBlock = new JLabel();
                            lblBlock.setBackground(new Color(1.0f, 1.0f - (float) value, 1.0f - (float) value));
                            lblBlock.setOpaque(true);
                            lblBlock.setToolTipText("Value = " + value);
                            pnlView.add(lblBlock);
                        }
                    }
                    pnlView.validate();
                    pnlView.repaint();
                }
            });
        }
        else {
// TODO: show validation exception
        }
    }//GEN-LAST:event_btnPreviewDataActionPerformed
    
    private void btnSavePreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePreviewActionPerformed
        Path idiPath = Paths.get(dataFile).toAbsolutePath();
        if (Files.exists(idiPath) && dataFile.toLowerCase().endsWith(".idi")) {
            BufferedImage bufferedImage = new BufferedImage(pnlView.getWidth(), pnlView.getHeight(), BufferedImage.TYPE_INT_ARGB);
            pnlView.paint(bufferedImage.getGraphics());
            try {
                String filename = idiPath.getFileName().toString();
                filename = filename.substring(0, filename.length() - 4) + ".png";
                ImageIO.write(bufferedImage, "PNG", idiPath.getParent().resolve(filename).toFile());
            }
            catch (IOException ex) {
                Logger.getLogger(DataViewerApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSavePreviewActionPerformed

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDataFolderBrowse;
    private javax.swing.JButton btnPreviewData;
    private javax.swing.JButton btnSavePreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pnlView;
    private javax.swing.JTextField txtDataFolderPath;
    // End of variables declaration//GEN-END:variables
}
